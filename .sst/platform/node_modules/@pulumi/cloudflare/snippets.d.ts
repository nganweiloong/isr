import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 */
export declare class Snippets extends pulumi.CustomResource {
    /**
     * Get an existing Snippets resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnippetsState, opts?: pulumi.CustomResourceOptions): Snippets;
    /**
     * Returns true if the given object is an instance of Snippets.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Snippets;
    /**
     * Creation time of the snippet
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * Content files of uploaded snippet
     */
    readonly files: pulumi.Output<string | undefined>;
    readonly metadata: pulumi.Output<outputs.SnippetsMetadata | undefined>;
    /**
     * Modification time of the snippet
     */
    readonly modifiedOn: pulumi.Output<string>;
    /**
     * Snippet identifying name
     */
    readonly snippetName: pulumi.Output<string>;
    /**
     * Identifier
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a Snippets resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnippetsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Snippets resources.
 */
export interface SnippetsState {
    /**
     * Creation time of the snippet
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Content files of uploaded snippet
     */
    files?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.SnippetsMetadata>;
    /**
     * Modification time of the snippet
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Snippet identifying name
     */
    snippetName?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Snippets resource.
 */
export interface SnippetsArgs {
    /**
     * Content files of uploaded snippet
     */
    files?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.SnippetsMetadata>;
    /**
     * Snippet identifying name
     */
    snippetName: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
